[{"url":"./","title":"はじめに","level":"1.1","keywords":[],"body":"はじめに HonKitとは オフィシャルにはこう記載されている。 honkitは、GitHub/GitとMarkdown(または Ascii Doc)を使用して、美しい本を作成するためのコマンドラインツール(およびNode.jsライブラリ)です。honkitは、コンテンツをWebサイト(カスタマイズ可能および拡張可能)または電子ブック(PDF、ePubまたはMobi)として出力できます。honkitはGitBook(Legacy)のフォークです。 引用：https://honkit.netlify.app/ 簡単に言えば、『Github PagesにMDを使ったドキュメント形式のサイトを簡単につくれちゃうよー。しかも全部無料で！』ってぼくは認識しました(((PDFのことは知らん🙄 旧GitBookを現HonKitに改良した中心人物がazuさんです。 https://github.com/azu https://efcl.info/ JavaScriptの勉強できる jsprimer も azuさんを中心にHonKitで作られています。ちなみに、https://efcl.info/ ここは Jekyll を使って作られています。 目的と所感 目的としては、公式サイトを見てもどうしたらいいのかよくわからかった事が多かったから単に導入から使い方までをまとめる。想定しているユーザーは、「複数人で無料でコンテンツをさくさくと公開する」をしたい管理担当者になる。ただし、自分ひとりだけの場合は 現Gitbook や HackMD などを使ったほうが良い。 また、デザインへのこだわりがあったり技術的に問題がないのなら、HugoやGatsbyのほうがいい。個人的にはReactのDocusaurusが一番いいんじゃないかと思う。 あと、JekyllにもGitbookのテーマがあった。 絶対に無料でクレカ登録なしという前提でこれら全部を試してみたところ、身内向けにストック型の情報共有としてHonKitは打って付けだと思う。イメージとしては高校や大学などのサークルや教授などまたは同人やサバゲーやオンラインサロンや野球チームなどで、限定管理者もメンバーも入れ替わりが想定されるミニマルな組織やチームにあってるような気がした。 技術担当ではないメンバーが、記事を投稿する際の学習コストがMarkdownの記述構法だけというのは安い。ましてやDiscodeやメモアプリなどで触れている人も少なくはないだろう。 WEBエンジニアを志したもののJSやPHPで挫折してしまった人や、フロントエンドに携わらないのに「パソコン詳しいっしょ！」と理不尽な扱いを受けてしまう諸兄にもHonKitの利用を一考してほしい。 ※リスペクトしているだけで回し者ではありますん Next 全体の流れ "},{"url":"flow.html","title":"全体の流れ","level":"1.2","keywords":[],"body":"全体の流れ まず先に断っておくと基本的に、基本的なことしか書かないつもりなのであしからず。それと今回はWindowsを使いますが、ぼくは普段MacOSを使っていてWindowsは初心者なので間違いがあれば指摘してくださるとありがたいです。 環境構築 1, HonKitはNodeが必要なので先にバージョン管理ツールを導入します。WindowsはVolta、UNIX系はasdfかanyenvを入れます。 2, エディターはVSCodeを使います。 3, Gitがまだなら下記を参考にインストールしてください。※タイトルは主観で勝手につけてます windowsにGitをインスコ 初心者必見！VSCodeでGit・GitHubを使う方法をイチからやさしく解説 図解でマスター！ゼロから始めるVScode＋Githubの使い方 HonKitの導入と基本 インストールからプラグインの導入 book.jsonとpackage.jsonについて ビルドやローカルでの確認について デザインについて少々 Github Pagesに公開 npmプラグインのgh-pagesを使います。 今のところここまで Github Actionsについて 記事の投稿について 理屈はいいから結果を寄こせ！ そんな欲張りの貴方でもリポジトリは先に作っておいてくださいね♪ 下ごしらえ //１行づつどぞ mkdir project && cd project && mkdir source npm init --y npm install honkit --save-dev npx honkit init ./source type nul > book.json book.jsonにコピペ※edit link のURLは自分のに変えてください。 { \"root\": \"./source\", \"title\": \"\", \"description\": \"\", \"author\": \"Name\", \"language\": \"ja\", \"plugins\": [ \"theme-default\", \"@dogatana/search-plus\", \"-lunr\", \"-search\", \"@dogatana/page-toc-button\", \"@dogatana/back-to-top-button\", \"anchors\", \"bottom-navigation\", \"copy-code-button\", \"edit-link\", \"hide-published-with\", \"hints\", \"insert-logo-link-style\", \"toggle-chapters\" ], \"pluginsConfig\": { \"toggle-chapters\":{}, \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 }, \"insert-logo-link-style\": { \"src\": \"/assets/logo.png\", \"style\": \"background: none;\", \"link\": \"/\", \"target\": \"_blank\" }, \"bottom-navigation\": { \"iconColor\": \"888888\", \"titleColor\": \"888888\", \"borderColor\": \"#3884FE\" }, \"edit-link\": { \"base\": \"https://github.com/user/user.github.io/edit/master/source/\", \"label\": \"このページを編集してあげる\" }, \"hints\": { \"info\": \"fa fa-bullhorn\", \"tip\": \"fa fa-coffee\", \"danger\": \"fa fa-check\", \"working\": \"fa fa-question-circle\" } }, \"styles\": { \"website\": \"styles/website.css\", \"pdf\": \"styles/pdf.css\" } } package.jsonにコピペ※homepage のURLは自分のに変えてください。 { \"homepage\": \"https://user.github.io/\", \"scripts\": { \"init\": \"npx honkit init ./source\", \"build\": \"npx honkit build . docs\", \"serve\": \"npx honkit serve\", \"deploy\": \"npx honkit build . docs && gh-pages -d docs\" }, \"devDependencies\": { \"@dogatana/honkit-plugin-back-to-top-button\": \"^1.0.0\", \"@dogatana/honkit-plugin-page-toc-button\": \"^1.0.0\", \"@dogatana/honkit-plugin-search-plus\": \"^1.0.1\", \"gh-pages\": \"^4.0.0\", \"gitbook-plugin-anchors\": \"^0.7.1\", \"gitbook-plugin-bottom-navigation\": \"^0.2.2\", \"gitbook-plugin-copy-code-button\": \"^0.0.2\", \"gitbook-plugin-edit-link\": \"^2.0.2\", \"gitbook-plugin-hide-published-with\": \"^0.0.1\", \"gitbook-plugin-hints\": \"^1.0.2\", \"gitbook-plugin-insert-logo-link-style\": \"^1.0.3\", \"honkit\": \"^4.0.0\", \"honkit-plugin-toggle-chapters\": \"^0.0.1\" } } SUMMARY.mdにフォルダやファイルなどを記述したら npx honkit init ./source 必要なフォルダとファイル作成 mkdir ./source/assets && type nul > ./source/404.html mkdir ./source/styles && type nul > ./source/styles/website.css テーマの色を入れ替え project/node_modules/gitbook-plugin-fontsettings/assets/fontsettings.js //上記の168行目を下記のように変更 theme: configTheme || 2 ファビコンの変更 - project/node_modules/@honkit/honkit-plugin-theme-default/_assets/website/images //上記内の画像を入れ替えるだけ apple-touch-icon-precomposed-152.png = 180x180-96dpi favicon.ico = 48x48-96dpi toc-button-backの色を変更 project/node_modules/@dogatana/honkit-plugin-page-toc-button/assets/plugin.css //84行目のrgbを 38, 40, 56, 0.9 docsにビルド npx honkit build . docs ローカルで確認 - http://localhost:4000 npx honkit serve gitignore追加 type nul > .gitignore echo node_modules/ _book >> .gitignore push ※ URLは自分のに変更 git init git add --all git commit -m \"first commit\" git remote add origin https://github.com/(user name)/(repository name).git git branch -M master git push -u origin master デプロイ git remote add origin https://github.com/(user name)/(repository name).git npm run deploy 最後にGithubで設定したら完了！ Previous はじめに Next Volta "},{"url":"setup/volta.html","title":"Volta","level":"2.1","keywords":[],"body":"Volta すでにパッケージ管理が入っている方は読み飛ばしてください HonkitにはNodeが必要です。今回はWindowsを使うので Volta を導入します。https://volta.sh/ 公式ではJavaScriptツールマネージャーと言っていますが実質Nodeのパッケージ管理ツールです。プロジェクト毎に勝手に良しなにしてくれるいいやつです。env系より楽だと思いました。 詳細は下記のサイトに譲りさっそくインストールします。 先にWindowsの開発者モードを有効にしてください。Windowsの設定から プライバシーとセキュリティ > 開発者向けと進むと開発者モードが出てくるのでトグルボタンをオンにするだけです。 次にWindows用にインストーラーがあるので公式からダウンロードして指示に従います。pathなどは勝手にやってくれるので楽ちんです。ターミナルを開いてvolta -vと入力してバージョンが表示されれば成功です。2022-10/03時点では1.0.8でした。 次にNodeをインストールします。入れたいバージョンが特になければLTSの最新を入れます。今日だと16.17.1です。 volta install node 試しにnpm-check-updatesを入れてみましょう。2行ありますがどちらを実行しても同じ結果です。yarnも使えます。 volta install npm-check-updates npm i -g npm-check-updates 確認したいときはvolta list allで詳細を確認できます。ちなみにnpm-check-updatesはncu -uで実行できるのですが、NVIDIAのCUDAなどが入っているとコマンドが被ります。その時はnpm-check-updates -uで実行すればおｋです。 VSCodeでの使用にあたっては、バージョンの指定や共有がなければ特になにもしなくても勝手にグローバルと切り分けてくれます。めちゃ楽です♪ おすすめの参考先 https://zenn.dev/taichifukumoto/articles/how-to-use-volta https://zenn.dev/yumemi_inc/articles/2021-11-09-volta?redirected=1 Previous 全体の流れ Next VSCode "},{"url":"setup/vscode.html","title":"VSCode","level":"2.2","keywords":[],"body":"VSCode Previous Volta Next 基本的なこと "},{"url":"honkit/basis.html","title":"基本的なこと","level":"3.1","keywords":[],"body":"基本的なこと HonKitの設定はbook.jsonで行います。 Font Awesomeはv4までです。 Gitbookのプラグインも使えます。 テーマやプラグインは割と簡単につくれます。 ビルドするとmdファイルがhtmlになります。 CSSやJavaScriptも使えます。 全ての答えは公式サイトにある！(((はず 四の五の言わずさっそく作ってみましょう。任意のフォルダで右クリックからVSCodeを開いてください。VSCodeのターミナルを開いたら下記を順番に実行してください。 mkdir project && cd project && mkdir source npm init --y npm install honkit --save-dev npx honkit init ./source 特に説明は不要かと思いますが、ポイントとしてはprojectフォルダに設定を置いたり成果物が入り、sourceフォルダに作りたいサイトの中身をぶち込んでいきます。initによって作成されたREADMEはトップページにあたりSUMMRYが画面左にある目次にあたります。 book.json type nul > book.json book.jsonファイルを作成したら別ページにサンプルを置いてあるのでbook.jsonにコピペしてください。重要なのは root、plugins、pluginsConfigの３つだけです。npmでインストールしたプラグインはpackage.jsonに登録され、その中からhonkitで使いたいプラグインをbook.jsonで指定および有効化します。そして指定したプラグイン自体の設定をpluginsConfigによって行います。 詳細はこちら package.json これも別ページにサンプルを置いてあるのでpackage.jsonにコピペしてください。先ほどnpmでインストールしたプラグインはpackage.jsonに登録されると言いましたが、逆に予めpackage.jsonに登録しておいてまとめてインストールすることもできます。下記を実行してみてください。 npm install --save-dev ⚠️HonKitをグローバルに入れたならプラグインもグローバルに、HonKitをローカルに入れたならプラグインもローカルに入れないとダメらしいです！推奨はローカルとのこと。voltaやenvなどを入れているなら本来は気にせず --save-dev や npx を使わなくても大丈夫です。ただ、このサイトでは統一して --save-dev や npx を使います。 SUMMARY.md まだ空の状態だと思いますので、試したい場合は下記をSUMMARY.mdに予めコピペしてください。 * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [HonKit is nice](part1/honkit.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) フォルダやファイルがまだない状態で先ほどのnpx honkit init ./sourceを実行すると自動的に生成してくれます。 ローカルでの確認とビルド ローカルサーバーの起動 npx honkit serve アクセスしたら見れる　http://localhost:4000 ビルド npx honkit build どちらも_bookが生成されるようになっています。docsに出力したい場合は「なにをなにに」の順番なので、下記を実行すればProject内にdocsが生成されます。 npx honkit build . docs ちなみに、VSCodeだと右上のボタンや Ctrl+K を押して V を押したりすると横にプレビューを出せます。 Previous VSCode Next サンプルコード "},{"url":"honkit/scode.html","title":"サンプルコード","level":"3.1.1","keywords":[],"body":"jsonサンプル book.json { \"root\": \"./source\", \"title\": \"\", \"description\": \"\", \"author\": \"Name\", \"language\": \"ja\", \"plugins\": [ \"theme-default\", \"@dogatana/search-plus\", \"-lunr\", \"-search\", \"@dogatana/page-toc-button\", \"@dogatana/back-to-top-button\", \"anchors\", \"copy-code-button\", \"github-issue-feedback\", \"hide-published-with\", \"hints\", \"insert-logo-link-style\", \"toggle-chapters\" ], \"pluginsConfig\": { \"toggle-chapters\":{}, \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 }, \"github-issue-feedback\": { \"repo\": \"user/repo\", \"label\": \"報告するる\" }, \"insert-logo-link-style\": { \"src\": \"/assets/logo.png\", \"style\": \"background: none;\", \"link\": \"http://www.google.com\", \"target\": \"_blank\" }, \"hints\": { \"info\": \"fa fa-bullhorn\", \"tip\": \"fa fa-coffee\", \"danger\": \"fa fa-check\", \"working\": \"fa fa-question-circle\" } }, \"styles\": { \"website\": \"styles/website.css\", \"pdf\": \"styles/pdf.css\" } } package.json { \"name\": \"project\", \"version\": \"1.0.0\", \"description\": \"\", \"homepage\": \"https://user.github.io/\", \"scripts\": { \"init\": \"npx honkit init ./source\", \"build\": \"npx honkit build . docs\", \"serve\": \"npx honkit serve\", \"deploy\": \"npx honkit build . docs && gh-pages -d docs\" }, \"keywords\": [], \"author\": \"Name\", \"license\": \"ISC\", \"devDependencies\": { \"honkit\": \"^4.0.0\", \"gh-pages\": \"^4.0.0\", \"@dogatana/honkit-plugin-back-to-top-button\": \"^1.0.0\", \"@dogatana/honkit-plugin-page-toc-button\": \"^1.0.0\", \"@dogatana/honkit-plugin-search-plus\": \"^1.0.1\", \"gitbook-plugin-anchors\": \"^0.7.1\", \"gitbook-plugin-copy-code-button\": \"^0.0.2\", \"gitbook-plugin-github-issue-feedback\": \"^1.4.0\", \"gitbook-plugin-hide-published-with\": \"^0.0.1\", \"gitbook-plugin-hints\": \"^1.0.2\", \"gitbook-plugin-insert-logo-link-style\": \"^1.0.3\", \"honkit-plugin-toggle-chapters\": \"^0.0.1\" } } website.css /* border-bottom */ h1 { border-bottom: 1px solid #000; } /* github-issue-feedback */ .gitbook-plugin-github-issue-feedback { background-color: #333; color: #fff; opacity: 0.8; padding: 4px; margin-right: 25px; margin-bottom: 4px; border-radius: 2px; } .gitbook-plugin-github-issue-feedback:hover { opacity: 1; } Previous 基本的なこと Next カスタマイズ "},{"url":"honkit/design.html","title":"カスタマイズ","level":"3.2","keywords":[],"body":"カスタマイズ 基本的に既存のプラグインでほとんどのことがカスタマイズできると思います。ただ、バージョンの依存関係の問題なのかうまく動かないものも散見されました。 プラグイン npm - https://www.npmjs.com/基本的には上記のnpmのサイトでgitbook-pluginまたはhonkit-pluginで検索してVScode(ターミナル)からインストールすることになります。 プラグイン名をbook.jsonのpluginsに登録することで有効になります。さらにそのプラグインに設定ができる場合はpluginsConfigに記載します。そのプラグインのnpmのページか製作者のGithubのページに記載されていることが多いです。そのプラグインを自分で編集してしまうのも一つの手です。 実際にプラグインをインストールしてみる 試しにbottom-navigationを入れてみましょう。 まずはVSCodeのターミナルからnpmでインストールします。 npm i gitbook-plugin-bottom-navigation --save-dev package.jsonをみるとgitbook-plugin-bottom-navigationが増えているのがわかるはずです。 次にbook.jsonを開いてpluginsに下記を追加します。 \"bottom-navigation\", さらにpluginsConfigに下記を追加します。nullの所に Hex でお好みのカラーコード(ネームもおｋ)を入れてください。何も入れなければデフォルトカラーになります。おぬぬめツール - ここは他にも便利ツールがあります。 \"bottom-navigation\": { \"iconColor\": \"null\", \"titleColor\": \"null\", \"borderColor\": \"#3884FE\" } 結果的には下記みたいになります。 { \"root\": \"./source\", \"plugins\": [ \"theme-default\", ～　中略　～ \"bottom-navigation\", \"insert-logo-link-style\", \"toggle-chapters\" ], \"pluginsConfig\": { \"bottom-navigation\": { \"iconColor\": \"red\", \"titleColor\": \"777777\", \"borderColor\": \"#3884FE\" } } } ローカルで確認してみる ここで一度どうなっているか見てみましょう。ターミナルで下記を実行してみてください。 npx honkit serve ブラウザから http://localhost:4000 にアクセスして、一番下を見るとプラグインの機能が追加されているはずです。 Ctrl+C で停止します。ついでにブラウザの右下を見ると [報告するる] というボタンがある事を確認しておいてください。 スタイルシート ヘッダーなどのデザインを変更したい時にはその方法はいくつかあります。上述のプラグインを利用したり、あるいは自ら作ってしまうのもひとつです。 HonKitの公式サイトによると「ソースから直接テーマのテンプレートを拡張できる」とあります。しかし「さくさくっと」いきたいのでココではスタイルシートの拡張についてのみ軽く紹介するだけにします。 レイアウトに興味がある方は下記の方々の_layouts内を参考にしてみてください。 Jsprimer akahigeg Stuyk まずbook.jsonに拡張スタイルシートの指定をします。※サンプルをコピペした方はすでに入っています \"styles\": { \"website\": \"styles/website.css\", } 次にディレクトリとファイルを作成します。 mkdir ./source/styles && type nul > ./source/styles/website.css このwebsite.cssに別ページのサンプルをコピペしてください。再度npx honkit serveを実行してみてください。 まずタイトルに下線が増えました。さらに先ほど確認した [報告するる] のデザインがJsprimerと同じになりました。このようにデザインの変更が可能です。興味がある方は、project/node_modules/@honkit/honkit-plugin-theme-default/_assets/website/style.cssを見ていじってみてください。 ただスマホで見るとJsprimerでは非表示になっているのですが、そこまでやるのはめんどいのでぼくは根本的に消しました。下記を実行すれば消せます。 npm r gitbook-plugin-github-issue-feedback プラグインを使わずにfaviconを変更する 結論だけ言うとproject/node_modules/@honkit/honkit-plugin-theme-default/_assets/website/imagesの画像を同じ名前にして入れ替えるだけです。 ちなみに、デフォルトのapple-touch-icon-precomposed-152.png は 180x180-96dpifavicon.ico は 48x48-96dpi になっていました。 そのほかのデザイン変更 正攻法なのかどうかよくわかりませんが、このサイトで実際にやった変更を記載しておきます。 テーマのデフォルトカラーを変更 Nightカラーが気に入ったのでコレがデフォルトになるように変更しました。project/node_modules/gitbook-plugin-fontsettings/assets/fontsettings.jsの168行目を次のようになるように付け足して変更すればできます。 theme: configTheme || 2 toc-button-backの色を変更 Nightモードの時の色が変だったので変更しました。project/node_modules/@dogatana/honkit-plugin-page-toc-button/assets/plugin.css の84行目のrgbの数値を38, 40, 56, 0.9に変更しました。 リンク付きのロゴ画像を追加する これはinsert-logo-link-styleプラグインを使っています。ファルダを作成して、そこにロゴの画像を置きます。 mkdir ./source/assets linkにはLINEのオープンチャットやDiscordなど好きなURLを入力してください。不要なら空にすればいいです。 Previous サンプルコード Next VSCとMD "},{"url":"honkit/vscmd.html","title":"VSCとMD","level":"3.3","keywords":[],"body":"VSCとMD あとで Previous カスタマイズ Next Github Pages "},{"url":"github/pages.html","title":"Github Pages","level":"4.1","keywords":[],"body":"Github Pages いよいよGitHub Pagesで公開しよう。 予めリポジトリは作成しておいてください。※README.mdは作成しないほうがいいです。参考 - https://docs.github.com/ja/pages/getting-started-with-github-pages/creating-a-github-pages-site .gitignoreで無駄なファイルを除外 push時にnode_modulesと_bookは無駄なので除外します。VSCodeのターミナルから下記を実行してください。 type nul > .gitignore echo node_modules/ _book >> .gitignore Git操作についてはここでは説明しません。ただcommitにはコメントが必要です。日本語も可能なので適宜ご自由に変更してください。URLに関してはぼくの場合は、https://github.com/dockteck/dockteck.github.io.gitとなります。これはご自分のに変更してください。 masterブランチにpush git init git add --all git commit -m \"first commit\" git remote add origin https://github.com/(user name)/(repository name).git git branch -M master git push -u origin master デプロイ npmでgh-pageをインストールすることで楽ちんになります。package.jsonのscriptsに\"deploy\": \"npx honkit build . docs && gh-pages -d docs\"と追記すればおｋです。※ぼくのサンプルをコピペしてるなら、すでにインストールも設定もできています 先に、サンプルのpackage.jsonの5行目のhomepageのURLを自分のに置き換えてください。ぼくの場合はhttps://dockteck.github.io/になります。 次に、下記のURLを自分のに変更してください。ぼくの場合は、https://github.com/dockteck/dockteck.github.io.gitとなります。 git remote add origin https://github.com/(user name)/(repository name).git いざ実行。 npm run deploy 最後に Github で設定 あとは、リポジトリのSettingsからPagesに行ってBranch欄のプルダウンをmasterからgh-pagesに変更したらSaveを押してください。 最後に上段タブにあるActionsを押してランプがオレンジから緑になったら完成です！ Previous VSCとMD Next 404について "},{"url":"github/404p.html","title":"404について","level":"4.2","keywords":[],"body":"404について type nul > ./source/404.html Previous Github Pages Next Github Actions "},{"url":"github/actions.html","title":"Github Actions","level":"4.3","keywords":[],"body":"Github Actions Previous 404について Next 参考 "},{"url":"others/books.html","title":"参考","level":"5.1","keywords":[],"body":"参考 Previous Github Actions Next MDチートシート "},{"url":"others/cheat.html","title":"MDチートシート","level":"5.2","keywords":[],"body":"MDチートシート Previous 参考 "}]